#!/usr/bin/env python3

import jinja2
import os

# TODO: Maybe it is possible to make 2D matrix of "env" in travis. Docs didn't explain that.
# Also I don't think that making good looking name from "env" is possible.

def generate():
    dict_to_render = {
        "builds": travis_builds()
    }
    yml_string = render(dict_to_render=dict_to_render)
    
    f = open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "..", "..", ".travis.yml"), 'w')
    f.write(yml_string)
    f.close()
    
def render(dict_to_render):
    script_dir = os.path.dirname(os.path.abspath(__file__))
    template_name = "travis_yml"

    loader = jinja2.FileSystemLoader(script_dir)
    jinja_environment = jinja2.Environment(loader=loader)
    template = jinja_environment.get_template(template_name)

    return template.render(dict_to_render)

def travis_builds():
    travis_builds = []
    
    # iOS devices
    iphone_7_ios114 = Destination(file_name="iphone_7_ios114.json", device="iPhone 7", ios="11.4")
    iphone_x_ios121 = Destination(file_name="iphone_x_ios121.json", device="iPhone X", ios="12.1")
    
    # https://docs.travis-ci.com/user/reference/osx/
    xcode_11_0_image = OsxImage(identifier="xcode11.0", xcode_version="11.0", xcode_build="11A420a", macos_version="10.14", jdk_version="12.0.2")
    
    all_osx_images = [
        xcode_11_0_image
    ]
    
    # Builds (executables)
    demo_tests = Build(swift_executable="TravisOversimplifiedDemoBuild", name="OversimplifiedDemo")
    logic_tests = Build(swift_executable="TravisLogicTestsBuild", name="Logic Tests")
    ipc_demo_tests = Build(swift_executable="TravisIpcDemoBuild", name="IPC Demo")
    
    def ios_build(build, destination, osx_image):
        return TravisBuild(
            name=f'{build.name} / {destination.device} / iOS {destination.ios} / Xcode {osx_image.xcode_version} / macOS {osx_image.macos_version}',
            destination=destination.file_name,
            osx_image=osx_image.identifier,
            swift_executable=build.swift_executable,
        )
    
    def osx_build(build, osx_image):
        return TravisBuild(
            # Note: format doesn't contain iOS info:
            name=f'{build.name} / Xcode {osx_image.xcode_version} / macOS {osx_image.macos_version}',
            # kludge. Mac OS targets don't need iOS destination. The value is ignored.
            destination=iphone_7_ios114.file_name,
            osx_image=osx_image.identifier,
            swift_executable=build.swift_executable,
        )

    # TODO: Restore these builds:
    # DEMO
    # travis_builds.append(ios_build(
    #     build=demo_tests, destination=iphone_7_ios114, osx_image=xcode_11_0_image
    # ))
    # travis_builds.append(ios_build(
    #     build=demo_tests, destination=iphone_x_ios121, osx_image=xcode_11_0_image
    # ))
    
    # LOGIC TESTS
    travis_builds.append(ios_build(
        build=logic_tests, destination=iphone_x_ios121, osx_image=xcode_11_0_image
    ))

    # TODO: Restore these builds:
    # IPC DEMO
    # travis_builds.append(osx_build(
    #     build=ipc_demo_tests, osx_image=xcode_10_2_image
    # ))
    
    return travis_builds

class Build:
    def __init__(self, swift_executable, name):
        self.swift_executable = swift_executable
        self.name = name
    
class TravisBuild:
    def __init__(self, name, destination, osx_image, swift_executable):
        self.name = name
        self.destination = destination
        self.osx_image = osx_image
        self.swift_executable = swift_executable
        
class Destination:
    def __init__(self, file_name, device, ios):
        self.file_name = file_name
        self.device = device
        self.ios = ios

class OsxImage:
    def __init__(self, identifier, xcode_version, xcode_build, macos_version, jdk_version):
        self.identifier = identifier
        self.xcode_version = xcode_version
        self.xcode_build = xcode_build
        self.macos_version = macos_version
        self.jdk_version = jdk_version
        
generate()